// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/// @title TrustVault - simple credential issuance & verification vault
/// @notice Register identities, allow verified issuers to issue/verify/revoke credentials
contract TrustVault {
    // ----------------------------
    // STRUCTS
    // ----------------------------
    struct Credential {
        string title;
        string description;
        address issuer;
        uint256 timestamp;
        bool isVerified;
    }

    struct Identity {
        string name;
        string email;
        bool isRegistered;
        uint256 credentialCount; // next credential id for this user
    }

    // ----------------------------
    // STATE
    // ----------------------------
    address public owner;
    uint256 public totalUsers;

    // Identity storage
    mapping(address => Identity) private identities;

    // Credentials are stored per user as mapping from credentialId => Credential
    mapping(address => mapping(uint256 => Credential)) private credentials;

    // Track verified issuers (addresses allowed to issue/verify/revoke)
    mapping(address => bool) public verifiedIssuers;

    // ----------------------------
    // EVENTS
    // ----------------------------
    event IdentityRegistered(address indexed user, string name, string email);
    event CredentialIssued(address indexed user, address indexed issuer, uint256 indexed credentialId, string title);
    event CredentialRevoked(address indexed user, uint256 indexed credentialId, address indexed revokedBy);
    event IssuerAdded(address indexed issuer);
    event IssuerRemoved(address indexed issuer);
    event CredentialVerified(address indexed user, uint256 indexed credentialId, address indexed verifier);

    // ----------------------------
    // MODIFIERS
    // ----------------------------
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner");
        _;
    }

    modifier onlyRegistered(address _user) {
        require(identities[_user].isRegistered, "User not registered");
        _;
    }

    modifier onlyVerifiedIssuer() {
        require(verifiedIssuers[msg.sender], "Not a verified issuer");
        _;
    }

    // ----------------------------
    // CONSTRUCTOR
    // ----------------------------
    constructor() {
        owner = msg.sender;
        verifiedIssuers[msg.sender] = true; // Deployer is a verified issuer by default
    }

    // ----------------------------
    // USER FUNCTIONS
    // ----------------------------

    /// @notice Register the caller as an identity
    /// @param _name The user's name
    /// @param _email The user's email
    function registerIdentity(string calldata _name, string calldata _email) external {
        require(bytes(_name).length > 0, "Name cannot be empty");
        require(bytes(_email).length > 0, "Email cannot be empty");
        require(!identities[msg.sender].isRegistered, "Already registered");

        identities[msg.sender] = Identity({
            name: _name,
            email: _email,
            isRegistered: true,
            credentialCount: 0
        });

        totalUsers++;
        emit IdentityRegistered(msg.sender, _name, _email);
    }

    // ----------------------------
    // ISSUER ACTIONS
    // ----------------------------

    /// @notice Issue a credential to a registered user (caller must be a verified issuer)
    /// @param _user The recipient user address
    /// @param _title Title of credential
    /// @param _description Description of credential
    function issueCredential(
        address _user,
        string calldata _title,
        string calldata _description
    ) external onlyVerifiedIssuer onlyRegistered(_user) {
        require(bytes(_title).length > 0, "Title cannot be empty");

        uint256 credId = identities[_user].credentialCount;

        credentials[_user][credId] = Credential({
            title: _title,
            description: _description,
            issuer: msg.sender,
            timestamp: block.timestamp,
            isVerified: true // issued by verified issuer => mark as verified
        });

        // increment next id
        identities[_user].credentialCount = credId + 1;

        emit CredentialIssued(_user, msg.sender, credId, _title);
    }

    /// @notice Revoke a credential. Only the original issuer or contract owner can revoke.
    /// @param _user The owner of the credential
    /// @param _credentialId The credential id to revoke
    function revokeCredential(address _user, uint256 _credentialId)
        external
        onlyRegistered(_user)
    {
        Credential storage cred = credentials[_user][_credentialId];
        require(bytes(cred.title).length > 0, "Credential does not exist");
        require(cred.isVerified, "Credential already revoked");
        require(msg.sender == cred.issuer || msg.sender == owner, "Not authorized to revoke");

        // mark as revoked
        cred.isVerified = false;

        emit CredentialRevoked(_user, _credentialId, msg.sender);
    }

    /// @notice Verify an existing credential (if it exists and was issued unverified for some reason).
    /// @param _user The owner address
    /// @param _credentialId The credential id to verify
    function verifyCredential(address _user, uint256 _credentialId)
        external
        onlyVerifiedIssuer
        onlyRegistered(_user)
    {
        Credential storage cred = credentials[_user][_credentialId];
        require(bytes(cred.title).length > 0, "Credential does not exist");
        require(!cred.isVerified, "Credential already verified");

        cred.isVerified = true;
        emit CredentialVerified(_user, _credentialId, msg.sender);
    }

    // ----------------------------
    // OWNER / ADMIN FUNCTIONS
    // ----------------------------

    /// @notice Add a verified issuer (only owner)
    /// @param _issuer Address to be added as verified issuer
    function addVerifiedIssuer(address _issuer) external onlyOwner {
        require(_issuer != address(0), "Zero address");
        require(!verifiedIssuers[_issuer], "Already verified");
        verifiedIssuers[_issuer] = true;
        emit IssuerAdded(_issuer);
    }

    /// @notice Remove a verified issuer (only owner)
    /// @param _issuer Address to be removed
    function removeVerifiedIssuer(address _issuer) external onlyOwner {
        require(verifiedIssuers[_issuer], "Issuer not verified");
        verifiedIssuers[_issuer] = false;
        emit IssuerRemoved(_issuer);
    }

    /// @notice Owner can transfer ownership
    /// @param _newOwner New owner address
    function transferOwnership(address _newOwner) external onlyOwner {
        require(_newOwner != address(0), "Zero address");
        owner = _newOwner;
    }

    // ----------------------------
    // VIEW / GETTERS
    // ----------------------------

    /// @notice Get one credential for a user
    /// @param _user Owner of credential
    /// @param _credentialId Credential id
    /// @return title Title
    /// @return description Description
    /// @return issuer Issuer address
    /// @return timestamp When issued
    /// @return isVerified Whether currently verified (not revoked)
    function getCredential(address _user, uint256 _credentialId)
        external
        view
        onlyRegistered(_user)
        returns (
            string memory title,
            string memory description,
            address issuer,
            uint256 timestamp,
            bool isVerified
        )
    {
        Credential memory cred = credentials[_user][_credentialId];
        require(bytes(cred.title).length > 0, "Credential does not exist");
        return (cred.title, cred.description, cred.issuer, cred.timestamp, cred.isVerified);
    }

    /// @notice Get number of credentials a user has
    /// @param _user User address
    /// @return count Number of credentials
    function getUserCredentialCount(address _user) external view onlyRegistered(_user) returns (uint256 count) {
        return identities[_user].credentialCount;
    }

    /// @notice Get basic identity info
    /// @param _user User address
    /// @return name User name
    /// @return email User email
    /// @return isRegistered Registered flag
    /// @return credentialCount Number of credentials
    function getIdentity(address _user)
        external
        view
        onlyRegistered(_user)
        returns (
            string memory name,
            string memory email,
            bool isRegistered,
            uint256 credentialCount
        )
    {
        Identity memory id = identities[_user];
        return (id.name, id.email, id.isRegistered, id.credentialCount);
    }

    /// @notice Check if an address is a verified issuer
    function isVerifiedIssuer(address _addr) external view returns (bool) {
        return verifiedIssuers[_addr];
    }
}
