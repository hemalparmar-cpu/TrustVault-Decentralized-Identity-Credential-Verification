// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract TrustVault {
    // ----------------------------
    // STRUCTS
    // ----------------------------
    struct Credential {
        string title;
        string description;
        address issuer;
        uint256 timestamp;
        bool isVerified;
    }

    struct Identity {
        string name;
        string email;
        bool isRegistered;
        uint256 credentialCount;
    }

    // ----------------------------
    // STATE VARIABLES
    // ----------------------------
    address public owner;
    uint256 public totalUsers;

    mapping(address => Identity) private identities;
    mapping(address => mapping(uint256 => Credential)) private credentials;
    mapping(address => bool) public verifiedIssuers;

    // ----------------------------
    // EVENTS
    // ----------------------------
    event IdentityRegistered(address indexed user, string name);
    event CredentialIssued(address indexed user, address indexed issuer, string title);
    event CredentialRevoked(address indexed user, uint256 indexed credentialId);
    event IssuerAdded(address indexed issuer);
    event IssuerRemoved(address indexed issuer);
    event CredentialVerified(address indexed user, uint256 indexed credentialId, address indexed verifier);

    // ----------------------------
    // MODIFIERS
    // ----------------------------
    modifier onlyOwner() {
        require(msg.sender == owner, "Not contract owner");
        _;
    }

    modifier onlyVerifiedIssuer() {
        require(verifiedIssuers[msg.sender], "Not a verified issuer");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    // ----------------------------
    // USER FUNCTIONS
    // ----------------------------
    function registerIdentity(string calldata _name, string calldata _email) external {
        Identity storage id = identities[msg.sender];
        require(!id.isRegistered, "Already registered");

        id.name = _name;
        id.email = _email;
        id.isRegistered = true;
        totalUsers++;

        emit IdentityRegistered(msg.sender, _name);
    }

    function issueCredential(address _user, string calldata _title, string calldata _description)
        external
        onlyVerifiedIssuer
    {
        require(identities[_user].isRegistered, "User not registered");

        uint256 credId = identities[_user].credentialCount++;
        credentials[_user][credId] = Credential({
            title: _title,
            description: _description,
            issuer: msg.sender,
            timestamp: block.timestamp,
            isVerified: false
        });

        emit CredentialIssued(_user, msg.sender, _title);
    }

    function revokeCredential(address _user, uint256 _credentialId) external {
        Credential storage cred = credentials[_user][_credentialId];
        require(cred.issuer == msg.sender || msg.sender == owner, "Not authorized");

        delete credentials[_user][_credentialId];
        emit CredentialRevoked(_user, _credentialId);
    }

    // ----------------------------
    // OWNER FUNCTIONS
    // ----------------------------
    function addVerifiedIssuer(address _issuer) external onlyOwner {
        require(!verifiedIssuers[_issuer], "Already verified");
        verifiedIssuers[_issuer] = true;

        emit IssuerAdded(_issuer);
    }

    function removeVerifiedIssuer(address _issuer) external onlyOwner {
        require(verifiedIssuers[_issuer], "Issuer not verified");
        verifiedIssuers[_issuer] = false;

        emit IssuerRemoved(_issuer);
    }

    // ----------------------------
    // âœ… NEW FUNCTION: Verify Credential
    // ----------------------------
    /// @notice Marks a credential as verified by a verified issuer
    /// @param _user The user who owns the credential
    /// @param _credentialId The ID of the credential to verify
    function verifyCredential(address _user, uint256 _credentialId) external onlyVerifiedIssuer {
        Credential storage cred = credentials[_user][_credentialId];
        require(bytes(cred.title).length > 0, "Credential does not exist");
        require(!cred.isVerified, "Already verified");

        cred.isVerified = true;

        emit CredentialVerified(_user, _credentialId, msg.sender);
    }

    // ----------------------------
    // VIEW FUNCTIONS
    // ----------------------------
    function getUserCredentialCount(address _user) external view returns (uint256) {
        return identities[_user].credentialCount;
    }

    function getCredential(address _user, uint256 _credentialId)
        external
        view
        returns (Credential memory)
    {
        return credentials[_user][_credentialId];
    }

    function getIdentity(address _user)
        external
        view
        returns (
            string memory name,
            string memory email,
            bool isRegistered,
            uint256 credentialCount
        )
    {
        Identity memory identity = identities[_user];
        return (identity.name, identity.email, identity.isRegistered, identity.credentialCount);
    }
}

