// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract TrustVault {
    // ----------------------------
    // STRUCTS
    // ----------------------------
    struct Credential {
        string title;
        string description;
        address issuer;
        uint256 timestamp;
        bool isVerified;
    }

    struct Identity {
        string name;
        string email;
        bool isRegistered;
        uint256 credentialCount;
    }

    // ----------------------------
    // STATE VARIABLES
    // ----------------------------
    address public owner;
    uint256 public totalUsers;

    mapping(address => Identity) private identities;
    mapping(address => mapping(uint256 => Credential)) private credentials;
    mapping(address => bool) public verifiedIssuers;

    // ----------------------------
    // EVENTS
    // ----------------------------
    event IdentityRegistered(address indexed user, string name);
    event CredentialIssued(address indexed user, address indexed issuer, string title);
    event CredentialRevoked(address indexed user, uint256 indexed credentialId);
    
    // ----------------------------
    // MODIFIERS
    // ----------------------------
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    modifier onlyRegistered() {
        require(identities[msg.sender].isRegistered, "User not registered");
        _;
    }

    modifier onlyVerifiedIssuer() {
        require(verifiedIssuers[msg.sender], "Not a verified issuer");
        _;
    }

    // ----------------------------
    // CONSTRUCTOR
    // ----------------------------
    constructor() {
        owner = msg.sender;
        verifiedIssuers[msg.sender] = true; // Contract deployer is a verified issuer
    }

    // ----------------------------
    // CORE FUNCTION 1: Register Identity
    // ----------------------------
    function registerIdentity(string calldata _name, string calldata _email) external {
        require(!identities[msg.sender].isRegistered, "Identity already registered");
        require(bytes(_name).length > 0, "Name cannot be empty");
        require(bytes(_email).length > 0, "Email cannot be empty");

        identities[msg.sender] = Identity({
            name: _name,
            email: _email,
            isRegistered: true,
            credentialCount: 0
        });

        totalUsers++;
        emit IdentityRegistered(msg.sender, _name);
    }

    // ----------------------------
    // CORE FUNCTION 2: Issue Credential
    // ----------------------------
    function issueCredential(
        address _user,
        string calldata _title,
        string calldata _description
    ) external onlyVerifiedIssuer {
        require(identities[_user].isRegistered, "User not registered");
        require(bytes(_title).length > 0, "Title cannot be empty");

        uint256 credentialId = identities[_user].credentialCount;

        credentials[_user][credentialId] = Credential({
            title: _title,
            description: _description,
            issuer: msg.sender,
            timestamp: block.timestamp,
            isVerified: true
        });

        identities[_user].credentialCount++;

        emit CredentialIssued(_user, msg.sender, _title);
    }

    // ----------------------------
    // CORE FUNCTION 3: View Credential
    // ----------------------------
    function getCredential(address _user, uint256 _credentialId)
        external
        view
        returns (
            string memory title,
            string memory description,
            address issuer,
            uint256 timestamp,
            bool isVerified
        )
    {
        require(identities[_user].isRegistered, "User not registered");
        require(_credentialId < identities[_user].credentialCount, "Credential does not exist");

        Credential memory cred = credentials[_user][_credentialId];

        return (
            cred.title,
            cred.description,
            cred.issuer,
            cred.timestamp,
            cred.isVerified
        );
    }

    // ----------------------------
    // CORE FUNCTION 4: Revoke Credential
    // ----------------------------
    function revokeCredential(address _user, uint256 _credentialId) external onlyVerifiedIssuer {
        require(identities[_user].isRegistered, "User not registered");
        require(_credentialId < identities[_user].credentialCount, "Credential does not exist");

        Credential storage cred = credentials[_user][_credentialId];
        require(cred.issuer == msg.sender, "Only the issuer can revoke this credential");
        require(cred.isVerified == true, "Credential already revoked");

        cred.isVerified = false;

        emit CredentialRevoked(_user, _credentialId);
    }

    // ----------------------------
    // ADMIN: Add Verified Issuer
    // ----------------------------
    function addVerifiedIssuer(address _issuer) external onlyOwner {
        verifiedIssuers[_issuer] = true;
    }

    // ----------------------------
    // VIEW FUNCTIONS
    // ----------------------------
    function getUserCredentialCount(address _user) external view returns (uint256) {
        return identities[_user].credentialCount;
    }

    function getIdentity(address _user)
        external
        view
        returns (
            string memory name,
            string memory email,
            bool isRegistered,
            uint256 credentialCount
        )
    {
        Identity memory identity = identities[_user];
        return (
            identity.name,
            identity.email,
            identity.isRegistered,
            identity.credentialCount
        );
    }
}
