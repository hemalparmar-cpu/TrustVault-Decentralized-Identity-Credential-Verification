// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract TrustVault {
    // ----------------------------
    // STRUCTS
    // ----------------------------
    struct Credential {
        string title;
        string description;
        address issuer;
        uint256 timestamp;
        bool isVerified;
    }

    struct Identity {
        string name;
        string email;
        bool isRegistered;
        uint256 credentialCount;
    }

    // ----------------------------
    // STATE
    // ----------------------------
    address public owner;
    uint256 public totalUsers;

    mapping(address => Identity) private identities;
    mapping(address => mapping(uint256 => Credential)) private credentials;
    mapping(address => bool) public verifiedIssuers;

    // ----------------------------
    // EVENTS
    // ----------------------------
    event IdentityRegistered(address indexed user, string name, string email);
    event CredentialIssued(address indexed user, address indexed issuer, uint256 indexed credentialId, string title);
    event CredentialRevoked(address indexed user, uint256 indexed credentialId, address indexed revokedBy);
    event IssuerStatusUpdated(address indexed issuer, bool status);
    event CredentialVerified(address indexed user, uint256 indexed credentialId, address indexed verifier);

    // ----------------------------
    // MODIFIERS
    // ----------------------------
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner");
        _;
    }

    modifier onlyRegistered(address _user) {
        require(identities[_user].isRegistered, "User not registered");
        _;
    }

    modifier onlyVerifiedIssuer() {
        require(verifiedIssuers[msg.sender], "Not a verified issuer");
        _;
    }

    // ----------------------------
    // CONSTRUCTOR
    // ----------------------------
    constructor() {
        owner = msg.sender;
        verifiedIssuers[msg.sender] = true;
    }

    // ----------------------------
    // USER FUNCTIONS
    // ----------------------------
    function registerIdentity(string calldata _name, string calldata _email) external {
        require(bytes(_name).length > 0, "Name cannot be empty");
        require(bytes(_email).length > 0, "Email cannot be empty");
        require(!identities[msg.sender].isRegistered, "Already registered");

        identities[msg.sender] = Identity({
            name: _name,
            email: _email,
            isRegistered: true,
            credentialCount: 0
        });

        totalUsers++;
        emit IdentityRegistered(msg.sender, _name, _email);
    }

    function issueCredential(
        address _user,
        string calldata _title,
        string calldata _description
    ) external onlyVerifiedIssuer onlyRegistered(_user) {
        require(bytes(_title).length > 0, "Title cannot be empty");
        uint256 credId = identities[_user].credentialCount;

        credentials[_user][credId] = Credential({
            title: _title,
            description: _description,
            issuer: msg.sender,
            timestamp: block.timestamp,
            isVerified: true
        });

        identities[_user].credentialCount = credId + 1;
        emit CredentialIssued(_user, msg.sender, credId, _title);
    }

    function revokeCredential(address _user, uint256 _credentialId)
        external
        onlyRegistered(_user)
    {
        Credential storage cred = credentials[_user][_credentialId];
        require(bytes(cred.title).length > 0, "Credential does not exist");
        require(cred.isVerified, "Credential already revoked");
        require(msg.sender == cred.issuer || msg.sender == owner, "Not authorized to revoke");

        cred.isVerified = false;
        emit CredentialRevoked(_user, _credentialId, msg.sender);
    }

    function verifyCredential(address _user, uint256 _credentialId)
        external
        onlyVerifiedIssuer
        onlyRegistered(_user)
    {
        Credential storage cred = credentials[_user][_credentialId];
        require(bytes(cred.title).length > 0, "Credential does not exist");
        require(!cred.isVerified, "Credential already verified");

        cred.isVerified = true;
        emit CredentialVerified(_user, _credentialId, msg.sender);
    }

    // ----------------------------
    // NEW ADMIN FUNCTION
    // ----------------------------

    /// @notice Add or remove a verified issuer in a single function
    /// @param _issuer Address to update
    /// @param _status true = add as verified issuer, false = remove
    function updateVerifiedIssuer(address _issuer, bool _status) external onlyOwner {
        require(_issuer != address(0), "Zero address");
        require(verifiedIssuers[_issuer] != _status, "No change in status");

        verifiedIssuers[_issuer] = _status;
        emit IssuerStatusUpdated(_issuer, _status);
    }

    // ----------------------------
    // VIEW FUNCTIONS
    // ----------------------------
    function getCredential(address _user, uint256 _credentialId)
        external
        view
        onlyRegistered(_user)
        returns (string memory, string memory, address, uint256, bool)
    {
        Credential memory cred = credentials[_user][_credentialId];
        require(bytes(cred.title).length > 0, "Credential does not exist");
        return (cred.title, cred.description, cred.issuer, cred.timestamp, cred.isVerified);
    }

    function getUserCredentialCount(address _user)
        external
        view
        onlyRegistered(_user)
        returns (uint256)
    {
        return identities[_user].credentialCount;
    }

    function getIdentity(address _user)
        external
        view
        onlyRegistered(_user)
        returns (string memory, string memory, bool, uint256)
    {
        Identity memory id = identities[_user];
        return (id.name, id.email, id.isRegistered, id.credentialCount);
    }

    function isVerifiedIssuer(address _addr) external view returns (bool) {
        return verifiedIssuers[_addr];
    }

    function transferOwnership(address _newOwner) external onlyOwner {
        require(_newOwner != address(0), "Zero address");
        owner = _newOwner;
    }
}

